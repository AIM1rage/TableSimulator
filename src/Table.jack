class Table {
    //(x, y) - top left corner coordinates, tableSize - the tableSize of table
    field int n;
    field int x, y;
    field int tableSize;
    field int cellSize;
    field Array cells;
    field itn playerX, playerY;

    constructor Table new(int An, Array gameField) {
        var int i, j;
        var int fieldValue;
        let n = An;
        if (n = 4) {
            let x = 128;
            let y = 0;
            let tableSize = 256;
            let cellSize = 64;
        }
        if (n = 3) {
            let x = 160;
            let y = 32;
            let tableSize = 192;
            let cellSize = 64;
        }
        let cells = Array.new(n * n);
        let j = 0;
        while (j < n) {
            let i = 0;
            while (i < n) {
                let fieldValue = gameField[j * n + i];
                if (fieldValue = 0) {
                    let playerX = i;
                    let playerY = j;
                }
                let cells[j * n + i] = Cell.new(cellSize * i + x, cellSize * j + y, cellSize, fieldValue);
                let i = i + 1;
            }
            let j = j + 1;
        }
        return this;
    }

    method void print() {
        var int i, j;
        var Cell temp;
        do printFrame();
        let j = 0;
        while (j < n) {
            let i = 0;
            while (i < n) {
                let temp = cells[j * n + i];
                do temp.print();
                let i = i + 1;
            }
            let j = j + 1;
        }
        return;
    }

    method void printFrame() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + tableSize - 1, y + tableSize - 1);
        do Screen.setColor(false);
        do Screen.drawRectangle(x + 1, y + 1, x + tableSize - 2, y + tableSize - 2);
        return;
    }

    //1 - up, 2 - down, 3 - right, 4 - left
    method int makeMove(int direction) {
        var boolean moved;
        var Cell cellFrom, cellTo;
        var int valueFrom, valueTo;
        let moved = false;
        let cellFrom = cells[playerY * n + playerX];
        let valueFrom = cellFrom.getValue();
        if ((direction = 1) & (playerY > 0)) {
            let cellTo = cells[playerY - 1 * n + playerX];
            let playerY = playerY - 1;
            let moved = true;
        }
        if ((direction = 2) & (playerY + 1 < n)) {
            let cellTo = cells[playerY + 1 * n + playerX];
            let playerY = playerY + 1;
            let moved = true;

        }
        if ((direction = 3) & (playerX + 1 < n)) {
            let cellTo = cells[playerY * n + playerX + 1];
            let playerX = playerX + 1;
            let moved = true;

        }
        if ((direction = 4) & (playerX > 0)) {
            let cellTo = cells[playerY * n + playerX - 1];
            let playerX = playerX - 1;
            let moved = true;
        }
        if (moved) {
            let valueTo = cellTo.getValue();
            do cellFrom.setValue(valueTo);
            do cellTo.setValue(valueFrom);
            do cellFrom.print();
            do cellTo.print();
            return 1;
        }
        return 0;
    }

    method boolean check() {
        var boolean solved;
        var int i, j;
        var int value;
        var Cell cell;
        let solved = true;
        let j = 0;
        while (j < n) {
            let i = 0;
            while (i < n) {
                if (j * n + i + 1 < (n * n)) {
                    let cell = cells[j * n + i];
                    let solved = solved & (j * n + i + 1 = cell.getValue());
                }
                let i = i + 1;
            }
            let j = j + 1;
        }
        return solved;
    }
}